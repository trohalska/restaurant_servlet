# ---------- LOGINS

create.user.log = Create new user:
create.user = INSERT INTO login (login, email, password, role, time) VALUES (?,?,?,?,?)
create.user.dbe = Cannot insert user:

select.login = Login user: 
select.login.byLogin = SELECT * FROM login WHERE login=?
select.login.byLogin.success = User logged successfully, user:
select.login.byLogin.dbe = Wrong login for user:
select.login.byLogin.dbe.pass = Wrong password for user:
select.login.byLogin.dbe.exist = User with same login exists!

# ---------- CATEGORIES

select.all.categories.log = Getting categories list
select.all.categories = SELECT * FROM categories
select.all.categories.dbe = Cannot find all categories
select.all.categories.empty = Categories list is empty

# ---------- DISHES

select.all.dishes = SELECT * FROM dishes d LEFT JOIN categories c ON d.category_id = c.id
select.all.dishes.pageable = SELECT (select count(*) from dishes),* FROM (SELECT row_number() OVER (ORDER BY %1$s %2$s) AS row,* FROM dishes d LEFT JOIN categories c ON d.category_id = c.id ORDER BY %1$s %2$s) AS temp WHERE temp.row BETWEEN ? AND ?
select.all.dishes.pageable.filter = SELECT (select count(*) from dishes WHERE category_id=?),* FROM (SELECT row_number() OVER (ORDER BY %1$s %2$s) AS row,* FROM dishes d LEFT JOIN categories c ON d.category_id = c.id WHERE c.id=? ORDER BY %1$s %2$s) AS temp WHERE temp.row BETWEEN ? AND ?
select.all.dishes.dbe = Cannot find all dishes
select.all.dishes.empty = Dishes list is empty

select.dishes.log = Select dish, id:
select.dishes = SELECT * FROM dishes d LEFT JOIN categories c ON d.category_id=c.id WHERE d.id=?
select.dishes.dbe = Cannot find dish, wrong id:

create.dishes.log = Create new dish
create.dishes = INSERT INTO dishes (name_en, name_ua, price, time, category_id) VALUES (?,?,?,?,?)
create.dishes.dbe = Cannot insert dish: 

update.dishes.log = Update dish:
update.dishes = UPDATE dishes SET name_en=?, name_ua=?, price=? WHERE id=?
update.dishes.dbe = Cannot update dish, id:

delete.dishes.log = Delete dish, id:
delete.dishes = DELETE FROM dishes WHERE id=?
delete.dishes.dbe = Cannot delete dish, id:

# ---------- BASKETS

select.all.baskets.log = Getting basket list for user:
select.all.baskets = SELECT * FROM baskets b LEFT JOIN dishes d on b.dish_id = d.id LEFT JOIN categories c on c.id = d.category_id WHERE login_id=? ORDER BY b.id
select.all.baskets.dbe = Cannot find all dishes
select.all.baskets.empty = Basket is empty

create.basket.log = Add new dish to the basket, dish id:
create.basket = INSERT INTO baskets (dish_id, login_id) VALUES (?,?)
create.basket.dbe = Cannot insert basket, id:

delete.basket.log = Delete dish from the basket, dish id:
delete.basket = DELETE FROM baskets WHERE id IN (SELECT id FROM baskets WHERE dish_id=? AND login_id=? LIMIT 1)
delete.basket.dbe = Cannot delete basket, id:

delete.all.basket.log = Crear all user basket, user id:
delete.all.basket = DELETE FROM baskets WHERE login_id=?
delete.all.basket.dbe = Cannot clear basket, user id:

# ---------- ORDERS

select.all.orders.manager.log = Getting all orders for manager
select.all.orders.manager = SELECT * FROM orders o LEFT JOIN login l ON o.login_id = l.id ORDER BY o.id

select.all.orders.log = Getting all orders for user
select.all.orders = SELECT * FROM orders o LEFT JOIN login l ON o.login_id = l.id WHERE o.login_id=? ORDER BY o.id
select.all.orders.dbe = Cannot find all orders
select.all.orders.empty = Orders list is empty

select.orders.log = Select order for payment, user:
select.orders = SELECT * FROM orders o LEFT JOIN login l ON o.login_id = l.id WHERE o.id=?
select.orders.dbe = Cannot find order for payment, id:

create.order.log = Creating new order got user:
create.order = INSERT INTO orders (status, time, total_price, login_id) VALUES (?, current_timestamp, (SELECT SUM(d.price) FROM baskets b JOIN dishes d on b.dish_id = d.id WHERE b.login_id=?), ?)
create.order.dbe = Cannot create order

update.orders.log = Update status for order:
update.orders = UPDATE orders SET status=? WHERE id=? AND status=?
update.orders.dbe = Cannot update orders status, id:

# ----------Validation errors
invalid.fields = Invalid form, empty fields
invalid.field = Invalid fields
invalid.id = Invalid id
invalid.positive.id = Invalid id, should be positive number
invalid.login = Invalid username, must consist of [a-zA-Z0-9] and has min 2 symbols
invalid.email = Invalid email
invalid.password = Invalid password, must have 2-6 symbols
invalid.username = Invalid username, login exists
invalid.user = You cannot login, this uses already logged in
invalid.name_en = Invalid english dish name
invalid.name_ua = Invalid ukrainian dish name
invalid.price = Price cannot be <= 0 and has no more than 2 digits after comma
invalid.status = Invalid status, this status does not exist
invalid.update.status = You cannot update new and done order

# ---------- Non standard errors

error.try.again = Something goes wrong, try again
error.unknown.role = Unknown role
error.json = Cannot get json body from request input stream or cannot pars it
transaction.rollback = Transaction is being rolled back
transaction.rollback.fail = Error in transaction rollback

error.denied = Access Denied!
error.access.denied = AccessDenied! You need to authorize!
error.forbidden.page = AccessDenied! Forbidden page!
error.for.logged.user = AccessDenied! You need to logout first!